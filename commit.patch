From df95c14e7a57df404a52271cf3faad28bc422603 Mon Sep 17 00:00:00 2001
From: jojobear13 <joseph.billo@gmail.com>
Date: Thu, 16 Jul 2020 20:20:37 -0500
Subject: [PATCH] Adding SGB palettes to GBC

---
 Makefile                             |   5 +-
 constants/misc_constants.asm         |   9 +
 constants/palette_constants.asm      |   4 +
 data/bg_map_attributes.asm           | 506 +++++++++++++++++++++++++++
 data/gbc_palettes.asm                | 266 ++++++++++++++
 data/sgb_packets.asm                 |   7 +
 data/super_palettes.asm              | 186 +++++++---
 engine/HoF_room_pc.asm               |   5 +-
 engine/battle/animations.asm         |  14 +
 engine/battle/battle_transitions.asm |   4 +
 engine/battle/core.asm               |   5 +-
 engine/battle/ghost_marowak_anim.asm |   3 +
 engine/bg_map_attributes.asm         | 220 ++++++++++++
 engine/gamefreak.asm                 |  59 +++-
 engine/hall_of_fame.asm              |   1 +
 engine/intro.asm                     |   5 +
 engine/menu/diploma.asm              |   1 +
 engine/oak_speech.asm                |   2 +
 engine/overworld/cut.asm             |   1 +
 engine/overworld/cut2.asm            |   2 +
 engine/overworld/healing_machine.asm |   3 +
 engine/overworld/oam.asm             |  22 +-
 engine/overworld/ssanne.asm          |   2 +
 engine/palettes.asm                  | 407 +++++++++++++++++++--
 engine/predefs12.asm                 |   2 +
 engine/slot_machine.asm              |   4 +
 engine/titlescreen.asm               |  31 +-
 engine/trade.asm                     |   5 +
 home.asm                             |  79 ++++-
 home/fade.asm                        |   9 +
 home/init.asm                        |   2 +-
 hram.asm                             |   1 +
 main.asm                             |  10 +-
 scripts/vermiliondock.asm            |   1 +
 wram.asm                             |  25 +-
 35 files changed, 1801 insertions(+), 107 deletions(-)
 create mode 100755 data/bg_map_attributes.asm
 create mode 100755 data/gbc_palettes.asm
 create mode 100755 engine/bg_map_attributes.asm

diff --git a/Makefile b/Makefile
index 32d37f161..00c62d055 100755
--- a/Makefile
+++ b/Makefile
@@ -45,8 +45,9 @@ $(pokered_obj): %_red.o: %.asm $$(dep)
 $(pokeblue_obj): %_blue.o: %.asm $$(dep)
 	rgbasm -D _BLUE -h -o $@ $*.asm

-pokered_opt  = -jsv -k 01 -l 0x33 -m 0x13 -p 0 -r 03 -t "POKEMON RED"
-pokeblue_opt = -jsv -k 01 -l 0x33 -m 0x13 -p 0 -r 03 -t "POKEMON BLUE"
+#gbcnote - use cjsv to compile as GBC+DMG rom
+pokered_opt  = -cjsv -k 01 -l 0x33 -m 0x13 -p 0 -r 03 -t "POKEMON RED"
+pokeblue_opt = -cjsv -k 01 -l 0x33 -m 0x13 -p 0 -r 03 -t "POKEMON BLUE"

 %.gbc: $$(%_obj)
 	rgblink -d -n $*.sym -l pokered.link -o $@ $^
diff --git a/constants/misc_constants.asm b/constants/misc_constants.asm
index d6a935f85..b8940af5b 100755
--- a/constants/misc_constants.asm
+++ b/constants/misc_constants.asm
@@ -206,3 +206,12 @@ LINK_STATE_TRADING       EQU $32 ; in a link trade
 LINKBATTLE_RUN       EQU $F
 LINKBATTLE_STRUGGLE  EQU $E
 LINKBATTLE_NO_ACTION EQU $D
+
+; DMGPalToGBCPal
+CONVERT_BGP  EQU 0
+CONVERT_OBP0 EQU 1
+CONVERT_OBP1 EQU 2
+
+NUM_COLORS EQU 4
+PAL_SIZE EQU NUM_COLORS * 2
+NUM_ACTIVE_PALS EQU 4
diff --git a/constants/palette_constants.asm b/constants/palette_constants.asm
index 1413ad988..44aa01d57 100755
--- a/constants/palette_constants.asm
+++ b/constants/palette_constants.asm
@@ -61,3 +61,7 @@ const_value = 0
 	const PAL_BADGE     ; $22
 	const PAL_CAVE      ; $23
 	const PAL_GAMEFREAK ; $24
+;gbcnote - added from yellow
+	const PAL_25        ; $25
+	const PAL_26        ; $26
+	const PAL_27        ; $27
diff --git a/data/bg_map_attributes.asm b/data/bg_map_attributes.asm
new file mode 100755
index 000000000..53c31787c
--- /dev/null
+++ b/data/bg_map_attributes.asm
@@ -0,0 +1,506 @@
+BGMapAttributes_Unknown1:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_Unknown2:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_GameFreakIntro:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_TrainerCard:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$03,$03,$00,$00,$00,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$03,$03,$00,$01,$01,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$02,$02,$00,$00,$03,$03,$00,$00,$02,$02,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$02,$02,$00,$00,$03,$03,$00,$00,$02,$02,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_PartyMenu:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_NidorinoIntro:	;gbcnote - modified for red/blue version
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
+
+BGMapAttributes_TitleScreen:	;gbcnote - modified the pal mappings to work better with red/blue version
+	db $23
+	dw $024d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+; vBGMap1
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_Slots:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_Pokedex:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_StatusScreen:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_Battle:
+	db $23
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_WholeScreen:
+	db $3f
+	dw $000d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+
+BGMapAttributes_Unknown13:
+	db $23
+	dw $024d
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+; vBGMap1
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
+	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
diff --git a/data/gbc_palettes.asm b/data/gbc_palettes.asm
new file mode 100755
index 000000000..52d054af5
--- /dev/null
+++ b/data/gbc_palettes.asm
@@ -0,0 +1,266 @@
+; palettes for overworlds, title screen, monsters
+;gbcnote - add pokemon yellow GBC palettes
+GBCBasePalettes:
+	; PAL_ROUTE
+	RGB 31, 31, 31
+	RGB 16, 31,  4
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_PALLET
+	RGB 31, 31, 31
+	RGB 23, 17, 31
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_VIRIDIAN
+	RGB 31, 31, 31
+	RGB 19, 31,  0
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_PEWTER
+	RGB 31, 31, 31
+	RGB 18, 18, 15
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_CERULEAN
+	RGB 31, 31, 31
+	RGB  5,  8, 31
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_LAVENDER
+	RGB 31, 31, 31
+	RGB 25,  4, 31
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_VERMILION
+	RGB 31, 31, 31
+	RGB 31, 19,  0
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_CELADON
+	RGB 31, 31, 31
+	RGB  5, 31,  5
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_FUCHSIA
+	RGB 31, 31, 31
+	RGB 31, 15, 15
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_CINNABAR
+	RGB 31, 31, 31
+	RGB 31,  8,  8
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_INDIGO
+	RGB 31, 31, 31
+	RGB 11,  8, 31
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_SAFFRON
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_TOWNMAP
+	RGB 31, 31, 31
+	RGB  0, 21, 31
+	RGB 10, 28,  0
+	RGB  1,  1,  1
+
+	; PAL_LOGO1
+	RGB 31, 31, 31	;white bg
+	RGB 31, 31,  0	;unused yellow logo text
+IF DEF(_RED)
+	RGB 17, 23, 10	;unused on title screen
+	RGB 15,  3,  3	;version subtitle text color
+ENDC
+IF DEF(_BLUE)
+	RGB 21,  0,  4	;unused on title screen
+	RGB  3,  3, 15	;version subtitle text color
+ENDC
+
+	; PAL_LOGO2
+	RGB 31, 31, 31	;white bg
+	RGB 31, 31,  0	;yellow logo text
+	RGB  7,  7, 25	;blue logo text shadow
+	RGB  0,  0, 17	;blue logo text outline
+
+	; PAL_0F
+	RGB 31, 31, 31
+	RGB 13,  1, 31
+	RGB  0,  9, 31
+	RGB  1,  1,  1
+
+	; PAL_MEWMON	;reworked to match red/blue tones
+	RGB 31, 31, 31
+	RGB 30, 17,  11
+	RGB 11,  5,  14
+	RGB  3,  3,  3
+
+	; PAL_BLUEMON
+	RGB 31, 31, 31
+	RGB 16, 18, 31
+	RGB  0,  1, 25
+	RGB  3,  3,  3
+
+	; PAL_REDMON
+	RGB 31, 31, 31
+	RGB 31, 17,  0
+	RGB 31,  0,  0
+	RGB  3,  3,  3
+
+	; PAL_CYANMON
+	RGB 31, 31, 31
+	RGB 16, 26, 31
+	RGB  0, 17, 31
+	RGB  3,  3,  3
+
+	; PAL_PURPLEMON
+	RGB 31, 31, 31
+	RGB 25, 15, 31
+	RGB 19,  0, 22
+	RGB  3,  3,  3
+
+	; PAL_BROWNMON
+	RGB 31, 31, 31
+	RGB 29, 18, 10
+	RGB 17,  9,  5
+	RGB  3,  3,  3
+
+	; PAL_GREENMON
+	RGB 31, 31, 31
+	RGB 17, 31, 11
+	RGB  1, 22,  6
+	RGB  3,  3,  3
+
+	; PAL_PINKMON
+	RGB 31, 31, 31
+	RGB 31, 15, 18
+	RGB 31,  0,  6
+	RGB  3,  3,  3
+
+	; PAL_YELLOWMON
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB 28, 14,  0
+	RGB  3,  3,  3
+
+	; PAL_GREYMON
+	RGB 31, 31, 31
+	RGB 20, 23, 10
+	RGB 11, 11,  5
+	RGB  3,  3,  3
+
+;gbcnote - retouched all the slot palettes to match the red/blue coloring
+	; PAL_SLOTS1
+	RGB 31, 31, 31	;reel background
+	RGB 21, 12, 15	;reel accents
+	RGB 21, 14,  0	;"7" fill color
+	RGB  3,  3,  3	;reel outline
+
+	; PAL_SLOTS2
+	RGB 31, 31, 31	;"3" icon fill
+	RGB 31, 31,  0	;"3" icon shape color
+IF DEF(_RED)
+	RGB 20,  8, 15	;"3" icon background color
+ENDC
+IF DEF(_BLUE)
+	RGB 9,  5, 30
+ENDC
+	RGB  3,  3,  3	;"3" icon outline
+
+	; PAL_SLOTS3
+	RGB 31, 31, 31	;"2" icon fill
+	RGB  3, 31,  9	;"2" icon shape color
+IF DEF(_RED)
+	RGB 20,  8, 15	;"2" icon background color
+ENDC
+IF DEF(_BLUE)
+	RGB 9,  5, 30
+ENDC
+	RGB  3,  3,  3	;"2" icon outline
+
+	; PAL_SLOTS4
+	RGB 31, 31, 31	;"1" icon fill
+IF DEF(_RED)
+	RGB  9,  5, 30	;"1" icon shape color
+	RGB 20,  8, 15	;"1" icon background color
+ENDC
+IF DEF(_BLUE)
+	RGB 20,  8, 15
+	RGB 9,  5, 30
+ENDC
+	RGB  3,  3,  3	;"1" icon outline
+
+	; PAL_BLACK
+	RGB 31, 31, 31
+	RGB  3,  3,  3
+	RGB  3,  3,  3
+	RGB  3,  3,  3
+
+	; PAL_GREENBAR
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB  0, 31,  0
+	RGB  3,  3,  3
+
+	; PAL_YELLOWBAR
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB 31, 18,  0
+	RGB  3,  3,  3
+
+	; PAL_REDBAR
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB 31,  0,  0
+	RGB  3,  3,  3
+
+	; PAL_BADGE
+	;re-toned to a nice teal for the cascade and earth badges
+	RGB 31, 31, 31
+	RGB  3, 11,  6
+	RGB  3, 17, 11
+	RGB  3,  3,  3
+
+	; PAL_CAVE
+	RGB 31, 31, 31
+	RGB 23,  8,  0
+	RGB 17, 14, 11
+	RGB  3,  3,  3
+
+	; PAL_GAMEFREAK
+	RGB 31, 31, 31
+	RGB 31, 19,  0
+	RGB 19, 19,  0
+	RGB  3,  3,  3
+
+	; PAL_25
+	RGB 31, 31, 31
+	RGB 31, 31,  0
+	RGB 11, 23, 31
+	RGB  3,  3,  3
+
+	; PAL_26
+	RGB 31, 31, 31
+	RGB 31, 18,  0
+	RGB 19,  7,  1
+	RGB  3,  3,  3
+
+	; PAL_27
+	RGB 31, 31, 31
+	RGB  9,  9,  9
+	RGB 31, 21,  0
+	RGB  3,  3,  3
diff --git a/data/sgb_packets.asm b/data/sgb_packets.asm
index cae91883c..8259c93bf 100755
--- a/data/sgb_packets.asm
+++ b/data/sgb_packets.asm
@@ -198,6 +198,10 @@ BlkPacket_GameFreakIntro:
 	db $03,$0c,$0b,$0e,$0d,$03
 	db $00

+UnknownPacket_72751:	;gbcnote - packet from yellow
+	ATTR_BLK 1
+	ATTR_BLK_DATA %111, 1,1,0, 04,00, 15,05
+	ds 8

 PalPacket_Empty:          PAL_SET 0, 0, 0, 0
 PalPacket_PartyMenu:      PAL_SET PAL_MEWMON, PAL_GREENBAR, PAL_YELLOWBAR, PAL_REDBAR
@@ -210,6 +214,9 @@ PalPacket_TrainerCard:    PAL_SET PAL_MEWMON, PAL_BADGE, PAL_REDMON, PAL_YELLOWM
 PalPacket_Generic:        PAL_SET PAL_MEWMON, 0, 0, 0
 PalPacket_NidorinoIntro:  PAL_SET PAL_PURPLEMON, PAL_BLACK, 0, 0
 PalPacket_GameFreakIntro: PAL_SET PAL_GAMEFREAK, PAL_REDMON, PAL_VIRIDIAN, PAL_BLUEMON
+;gbctest - adding pal packets from yellow
+UnknownPalPacket_72811:   PAL_SET PAL_25, PAL_25, PAL_25, PAL_25
+UnknownPalPacket_72821:   PAL_SET PAL_25, PAL_27, PAL_25, PAL_25

 PalTrnPacket:  PAL_TRN
 MltReq1Packet: MLT_REQ 1
diff --git a/data/super_palettes.asm b/data/super_palettes.asm
index 97f1d8ec9..2926cd798 100755
--- a/data/super_palettes.asm
+++ b/data/super_palettes.asm
@@ -1,122 +1,177 @@
 ; palettes for overworlds, title screen, monsters
 SuperPalettes:
-	RGB 31,29,31 ; PAL_ROUTE
+	; PAL_ROUTE
+	RGB 31,29,31
 	RGB 21,28,11
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_PALLET
+
+	; PAL_PALLET
+	RGB 31,29,31
 	RGB 25,28,27
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_VIRIDIAN
+
+	; PAL_VIRIDIAN
+	RGB 31,29,31
 	RGB 17,26,3
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_PEWTER
+
+	; PAL_PEWTER
+	RGB 31,29,31
 	RGB 23,25,16
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_CERULEAN
+
+	; PAL_CERULEAN
+	RGB 31,29,31
 	RGB 17,20,30
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_LAVENDER
+
+	; PAL_LAVENDER
+	RGB 31,29,31
 	RGB 27,20,27
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_VERMILION
+
+	; PAL_VERMILION
+	RGB 31,29,31
 	RGB 30,18,0
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_CELADON
+
+	; PAL_CELADON
+	RGB 31,29,31
 	RGB 16,30,22
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_FUCHSIA
+
+	; PAL_FUCHSIA
+	RGB 31,29,31
 	RGB 31,15,22
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_CINNABAR
+
+	; PAL_CINNABAR
+	RGB 31,29,31
 	RGB 26,10,6
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_INDIGO
+
+	; PAL_INDIGO
+	RGB 31,29,31
 	RGB 22,14,24
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_SAFFRON
+
+	; PAL_SAFFRON
+	RGB 31,29,31
 	RGB 27,27,3
 	RGB 20,26,31
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_TOWNMAP
+
+	; PAL_TOWNMAP
+	RGB 31,29,31
 	RGB 20,26,31
 	RGB 17,23,10
 	RGB 3,2,2
+
+	; PAL_LOGO1
 IF DEF(_RED)
-	RGB 31,29,31 ; PAL_LOGO1
-	RGB 30,30,17
-	RGB 17,23,10
-	RGB 21,0,4
+	RGB 31,29,31 	;white bg
+	RGB 30,30,17	;yellow logo text
+	RGB 17,23,10	;unused on title screen
+	RGB 21,0,4	;version subtitle text color
 ENDC
 IF DEF(_BLUE)
-	RGB 31,29,31 ; PAL_LOGO1
-	RGB 30,30,17
-	RGB 21,0,4
-	RGB 14,19,29
+	RGB 31,29,31	;white bg
+	RGB 30,30,17	;yellow logo text
+	RGB 21,0,4	;unused on title screen
+	RGB 14,19,29	;version subtitle text color
 ENDC
-	RGB 31,29,31 ; PAL_LOGO2
-	RGB 30,30,17
-	RGB 18,18,24
-	RGB 7,7,16
-	RGB 31,29,31 ; PAL_0F
+
+	; PAL_LOGO2
+	RGB 31,29,31 	;white bg
+	RGB 30,30,17	;unused on title screen
+	RGB 18,18,24	;blue logo text shadow
+	RGB 7,7,16	;blue logo text outline
+
+	; PAL_0F
+	RGB 31,29,31
 	RGB 24,20,30
 	RGB 11,20,30
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_MEWMON
+
+	; PAL_MEWMON
+	RGB 31,29,31
 	RGB 30,22,17
 	RGB 16,14,19
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_BLUEMON
+
+	; PAL_BLUEMON
+	RGB 31,29,31
 	RGB 18,20,27
 	RGB 11,15,23
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_REDMON
+
+	; PAL_REDMON
+	RGB 31,29,31
 	RGB 31,20,10
 	RGB 26,10,6
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_CYANMON
+
+	; PAL_CYANMON
+	RGB 31,29,31
 	RGB 21,25,29
 	RGB 14,19,25
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_PURPLEMON
+
+	; PAL_PURPLEMON
+	RGB 31,29,31
 	RGB 27,22,24
 	RGB 21,15,23
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_BROWNMON
+
+	; PAL_BROWNMON
+	RGB 31,29,31
 	RGB 28,20,15
 	RGB 21,14,9
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_GREENMON
+
+	; PAL_GREENMON
+	RGB 31,29,31
 	RGB 20,26,16
 	RGB 9,20,11
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_PINKMON
+
+	; PAL_PINKMON
+	RGB 31,29,31
 	RGB 30,22,24
 	RGB 28,15,21
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_YELLOWMON
+
+	; PAL_YELLOWMON
+	RGB 31,29,31
 	RGB 31,28,14
 	RGB 26,20,0
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_GREYMON
+
+	; PAL_GREYMON
+	RGB 31,29,31
 	RGB 26,21,22
 	RGB 15,15,18
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_SLOTS1
+
+	; PAL_SLOTS1
+	RGB 31,29,31
 	RGB 26,21,22
 	RGB 27,20,6
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_SLOTS2
+
+	; PAL_SLOTS2
+	RGB 31,29,31
 	RGB 31,31,17
 IF DEF(_RED)
 	RGB 25,17,21
@@ -125,7 +180,9 @@ IF DEF(_BLUE)
 	RGB 16,19,29
 ENDC
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_SLOTS3
+
+	; PAL_SLOTS3
+	RGB 31,29,31
 	RGB 22,31,16
 IF DEF(_RED)
 	RGB 25,17,21
@@ -134,7 +191,9 @@ IF DEF(_BLUE)
 	RGB 16,19,29
 ENDC
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_SLOTS4
+
+	; PAL_SLOTS4
+	RGB 31,29,31
 IF DEF(_RED)
 	RGB 16,19,29
 	RGB 25,17,21
@@ -144,31 +203,64 @@ IF DEF(_BLUE)
 	RGB 16,19,29
 ENDC
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_BLACK
+
+	; PAL_BLACK
+	RGB 31,29,31
 	RGB 7,7,7
 	RGB 2,3,3
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_GREENBAR
+
+	; PAL_GREENBAR
+	RGB 31,29,31
 	RGB 30,26,15
 	RGB 9,20,11
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_YELLOWBAR
+
+	; PAL_YELLOWBAR
+	RGB 31,29,31
 	RGB 30,26,15
 	RGB 26,20,0
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_REDBAR
+
+	; PAL_REDBAR
+	RGB 31,29,31
 	RGB 30,26,15
 	RGB 26,10,6
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_BADGE
+
+	; PAL_BADGE
+	RGB 31,29,31
 	RGB 30,22,17
 	RGB 11,15,23
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_CAVE
+
+	; PAL_CAVE
+	RGB 31,29,31
 	RGB 21,14,9
 	RGB 18,24,22
 	RGB 3,2,2
-	RGB 31,29,31 ; PAL_GAMEFREAK
+
+	; PAL_GAMEFREAK
+	RGB 31,29,31
 	RGB 31,28,14
 	RGB 24,20,10
 	RGB 3,2,2
+
+;gbcnote - added from yellow
+	; PAL_25
+	RGB 31, 31, 30
+	RGB 31, 30, 22
+	RGB 23, 27, 31
+	RGB  6,  6,  6
+
+	; PAL_26
+	RGB 31, 31, 30
+	RGB 28, 23,  9
+	RGB 18, 14, 10
+	RGB  6,  6,  6
+
+	; PAL_27
+	RGB 31, 31, 30
+	RGB 16, 16, 16
+	RGB 31, 25,  9
+	RGB  6,  6,  6
diff --git a/engine/HoF_room_pc.asm b/engine/HoF_room_pc.asm
index 7e08631cc..ad210b73d 100755
--- a/engine/HoF_room_pc.asm
+++ b/engine/HoF_room_pc.asm
@@ -20,6 +20,7 @@ HallOfFamePC:
 	call FillFourRowsWithBlack
 	ld a, %11000000
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	call EnableLCD
 	ld a, $ff
 	call PlaySoundWaitForCurrent
@@ -39,6 +40,7 @@ FadeInCreditsText:
 .loop
 	ld a, [hli]
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 5
 	call DelayFrames
 	dec b
@@ -78,7 +80,7 @@ DisplayCreditsMon:
 	call FillMiddleOfScreenWithWhite
 	ld a, %11111100 ; make the mon a black silhouette
 	ld [rBGP], a
-
+	call UpdateGBCPal_BGP
 ; scroll the mon left by one tile 7 times
 	ld bc, 7
 .scrollLoop1
@@ -102,6 +104,7 @@ DisplayCreditsMon:
 	ld [hWY], a
 	ld a, %11000000
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ret

 INCLUDE "data/credit_mons.asm"
diff --git a/engine/battle/animations.asm b/engine/battle/animations.asm
index 26ba76c9f..be66b9338 100755
--- a/engine/battle/animations.asm
+++ b/engine/battle/animations.asm
@@ -245,11 +245,13 @@ PlayAnimation:
 	push af
 	ld a, [wAnimPalette]
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	call LoadAnimationTileset
 	call LoadSubanimation
 	call PlaySubanimation
 	pop af
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 .nextAnimationCommand
 	pop hl
 	jr .animationLoop
@@ -537,6 +539,8 @@ SetAnimationPalette:
 	ld [rOBP0], a
 	ld a, $6c
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret
 .notSGB
 	ld a, $e4
@@ -544,6 +548,8 @@ SetAnimationPalette:
 	ld [rOBP0], a
 	ld a, $6c
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret

 PlaySubanimation:
@@ -733,6 +739,7 @@ DoBallTossSpecialEffects:
 	ld a, [rOBP0]
 	xor %00111100 ; complement colors 1 and 2
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 .skipFlashingEffect
 	ld a, [wSubAnimCounter]
 	cp 11 ; is it the beginning of the subanimation?
@@ -1102,6 +1109,7 @@ AnimationFlashScreenLong:
 	cp $01 ; is it the end of the palettes?
 	jr z, .endOfPalettes
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	call FlashScreenLongDelay
 	jr .innerLoop
 .endOfPalettes
@@ -1164,14 +1172,17 @@ AnimationFlashScreen:
 	push af ; save initial palette
 	ld a, %00011011 ; 0, 1, 2, 3 (inverted colors)
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 2
 	call DelayFrames
 	xor a ; white out background
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 2
 	call DelayFrames
 	pop af
 	ld [rBGP], a ; restore initial palette
+	call UpdateGBCPal_BGP
 	ret

 AnimationDarkScreenPalette:
@@ -1217,6 +1228,7 @@ SetAnimationBGPalette:
 	ld a, c
 .next
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ret

 	ld b, $5
@@ -2692,12 +2704,14 @@ AnimationLeavesFalling:
 	push af
 	ld a, [wAnimPalette]
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	ld d, $37 ; leaf tile
 	ld a, 3 ; number of leaves
 	ld [wNumFallingObjects], a
 	call AnimationFallingObjects
 	pop af
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	ret

 AnimationPetalsFalling:
diff --git a/engine/battle/battle_transitions.asm b/engine/battle/battle_transitions.asm
index 985a1eb25..453a2c94a 100755
--- a/engine/battle/battle_transitions.asm
+++ b/engine/battle/battle_transitions.asm
@@ -196,6 +196,9 @@ BattleTransition_BlackScreen:
 	ld [rBGP], a
 	ld [rOBP0], a
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret

 ; for non-dungeon trainer battles
@@ -359,6 +362,7 @@ BattleTransition_FlashScreen_:
 	cp $1
 	jr z, .done
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 2
 	call DelayFrames
 	jr .loop
diff --git a/engine/battle/core.asm b/engine/battle/core.asm
index d8daa3467..f93b942cd 100755
--- a/engine/battle/core.asm
+++ b/engine/battle/core.asm
@@ -158,6 +158,9 @@ SlidePlayerAndEnemySilhouettesOnScreen:
 	ld [rBGP], a
 	ld [rOBP0], a
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 .slideSilhouettesLoop ; slide silhouettes of the player's pic and the enemy's pic onto the screen
 	ld h, b
 	ld l, $40
@@ -184,10 +187,10 @@ SlidePlayerAndEnemySilhouettesOnScreen:
 	ld [rWY], a
 	inc a
 	ld [H_AUTOBGTRANSFERENABLED], a
+	call HideSprites
 	call Delay3
 	ld b, SET_PAL_BATTLE
 	call RunPaletteCommand
-	call HideSprites
 	jpab PrintBeginningBattleText

 ; when a battle is starting, silhouettes of the player's pic and the enemy's pic are slid onto the screen
diff --git a/engine/battle/ghost_marowak_anim.asm b/engine/battle/ghost_marowak_anim.asm
index 7adb20d89..0ec536c05 100755
--- a/engine/battle/ghost_marowak_anim.asm
+++ b/engine/battle/ghost_marowak_anim.asm
@@ -2,6 +2,7 @@ MarowakAnim:
 ; animate the ghost being unveiled as a Marowak
 	ld a, $e4
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	call CopyMonPicFromBGToSpriteVRAM ; cover the BG ghost pic with a sprite ghost pic that looks the same
 ; now that the ghost pic is being displayed using sprites, clear the ghost pic from the BG tilemap
 	coord hl, 12, 0
@@ -27,6 +28,7 @@ MarowakAnim:
 	sla a
 	sla a
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	jr nz, .fadeOutGhostLoop
 	call ClearSprites
 	call CopyMonPicFromBGToSpriteVRAM ; copy Marowak pic from BG to sprite VRAM
@@ -40,6 +42,7 @@ MarowakAnim:
 	srl b
 	rra
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	ld a, b
 	and a
 	jr nz, .fadeInMarowakLoop
diff --git a/engine/bg_map_attributes.asm b/engine/bg_map_attributes.asm
new file mode 100755
index 000000000..2c194e214
--- /dev/null
+++ b/engine/bg_map_attributes.asm
@@ -0,0 +1,220 @@
+LoadBGMapAttributes::
+	ld hl, BGMapAttributesPointers
+	ld c, d
+	ld a, c ; c = which packet
+	push af ; save for later (to determine if we're handling the trainer card or party menu)
+	dec a         ; read this code as:
+	add a         ;	dec a
+	ld e, a       ; add a
+	xor a         ; ld e, a
+	ld d, a       ; ld d, 0
+	add hl, de    ; add hl, de
+	ld a, [hli]   ; ld a, [hli]
+	ld e, a       ; ld h, [hl]
+	ld a, [hl]    ; ld l, a
+	ld h, a
+	ld a, e
+	ld l, a
+
+	di
+	ld a, $1
+	ld [rVBK], a
+	push hl
+	ld a, [hl]
+	ld c, a ; save attribute count for later
+	ld de, $10
+	add hl, de
+	ld a, h
+	ld [rHDMA1], a
+	ld a, l
+	ld [rHDMA2], a
+	ld de, vBGMap0
+	ld a, d
+	ld [rHDMA3], a
+	ld a, e
+	ld [rHDMA4], a
+
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK ; is LCD off?
+	jr z, .lcdOff ; if off, transfer immediately
+; wait for VBlank if LCD is on
+.waitForVBlankLoop1
+	ld a, [rLY]
+	cp $90
+	jr nz, .waitForVBlankLoop1
+.waitForAccessibleVRAMLoop1
+	ld a, [rSTAT]
+	and %10 ; are we in HBlank or VBlank?
+	jr nz, .waitForAccessibleVRAMLoop1 ; loop until we're in a safe period to transfer to VRAM
+.lcdOff
+	ld a, c ; number of BG attributes to transfer, plus 1 times 16
+	ld [rHDMA5], a ; initiate transfer
+	;call Func_3082 ; update audio so it doesn't "lag"
+	pop hl
+	ld a, [hli]
+	ld c, a     ; number of BG attributes to transfer, plus 1 times 16
+	ld a, [hli]
+	ld e, a
+	ld a, [hli]
+	ld d, a    ; offset of the attributes
+	add hl, de ; hl = new pointer
+	ld a, h
+	ld [rHDMA1], a
+	ld a, l
+	ld [rHDMA2], a
+	ld de, vBGMap1 ; copy to vBGMap1
+	ld a, d
+	ld [rHDMA3], a
+	ld a, e
+	ld [rHDMA4], a
+; LCD check again
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK ; is LCD off?
+	jr z, .lcdOff2 ; if off, transfer immediately
+; wait for VBlank if LCD is on
+.waitForVBlankLoop2
+	ld a, [rLY]
+	cp $90
+	jr nz, .waitForVBlankLoop2
+.waitForAccessibleVRAMLoop2
+	ld a, [rSTAT]
+	and %10 ; are we in HBlank or VBlank?
+	jr nz, .waitForAccessibleVRAMLoop2 ; loop until we're in a safe period to transfer to VRAM
+.lcdOff2
+	ld a, c
+	ld [rHDMA5], a
+	pop af
+	dec a
+	dec a
+	dec a
+	dec a
+	jr nz, .checkIfHandlingPartyMenu
+	call HandleBadgeFaceAttributes
+	jr .done
+.checkIfHandlingPartyMenu
+	dec a
+	call z, HandlePartyHPBarAttributes
+.done
+	;call Func_3082
+	ld a, [rIF]
+	res VBLANK, a
+	ld [rIF], a
+	xor a
+	ld [rVBK], a
+	ei
+	ret
+
+BGMapAttributesPointers:
+	dw BGMapAttributes_Unknown1
+	dw BGMapAttributes_Unknown2
+	dw BGMapAttributes_GameFreakIntro
+	dw BGMapAttributes_TrainerCard
+	dw BGMapAttributes_PartyMenu
+	dw BGMapAttributes_NidorinoIntro
+	dw BGMapAttributes_TitleScreen
+	dw BGMapAttributes_Slots
+	dw BGMapAttributes_Pokedex
+	dw BGMapAttributes_StatusScreen
+	dw BGMapAttributes_Battle
+	dw BGMapAttributes_WholeScreen
+	dw BGMapAttributes_Unknown13
+
+HandleBadgeFaceAttributes:
+; zero out the attributes if the player doesn't have the respective badge
+; BOULDERBADGE
+	ld hl, vBGMap1 + $183
+	ld de, wTrainerCardBadgeAttributes + 6 * 0
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; CASCADEBADGE
+	ld hl, vBGMap1 + $187
+	ld de, wTrainerCardBadgeAttributes + 6 * 1
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; THUNDERBADGE
+	ld hl, vBGMap1 + $18b
+	ld de, wTrainerCardBadgeAttributes + 6 * 2
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; RAINBOWBADGE
+	ld hl, vBGMap1 + $18f
+	ld de, wTrainerCardBadgeAttributes + 6 * 3
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; SOULBADGE
+	ld hl, vBGMap1 + $1e3
+	ld de, wTrainerCardBadgeAttributes + 6 * 6
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; MARSHBADGE
+	ld hl, vBGMap1 + $1e7
+	ld de, wTrainerCardBadgeAttributes + 6 * 7
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; VOLCANOBADGE
+	ld hl, vBGMap1 + $1eb
+	ld de, wTrainerCardBadgeAttributes + 6 * 8
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+; EARTHBADGE
+	ld hl, vBGMap1 + $1ef
+	ld de, wTrainerCardBadgeAttributes + 6 * 9
+	ld a, [de]
+	and a
+	call z, ZeroOutCurrentBadgeAttributes
+	ret
+
+ZeroOutCurrentBadgeAttributes:
+	push hl
+	xor a
+	ld [hli], a
+	ld [hl], a
+	ld bc, $1f
+	add hl, bc
+	ld [hli], a
+	ld [hl], a
+	pop hl
+	ret
+
+HandlePartyHPBarAttributes:
+; hp bars require 3 (green, orange, red) colours, when there are only 2 "free" colours per palette
+; therefore, we must transfer individual bg attributes where the locations of the hp bars are in vram
+	ld hl, vBGMap1 + $25 ; location of start of the HP bar in vram
+	ld de, wPartyHPBarAttributes
+	ld c, PARTY_LENGTH
+.loop
+	push bc
+	push hl
+	ld a, [de]
+	and $3 ; 4 possible palettes
+	rept 7 ; hp bar length in tiles
+	ld [hli], a
+	endr
+	pop hl
+	ld bc, $40 ; get 2nd party location
+	add hl, bc
+	push hl
+
+	;push de ; (inefficiently) copy de to hl
+	;pop hl
+	ld h, d
+	ld l, e
+
+	ld bc, $6
+	add hl, bc ; get the next palette
+
+	push hl
+	pop de ; copy back to de
+
+	pop hl
+	pop bc
+	dec c
+	jr nz, .loop
+	ret
diff --git a/engine/gamefreak.asm b/engine/gamefreak.asm
index 5226072b1..833ee304e 100755
--- a/engine/gamefreak.asm
+++ b/engine/gamefreak.asm
@@ -3,6 +3,8 @@ LoadShootingStarGraphics:
 	ld [rOBP0], a
 	ld a, $a4
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ld de, AnimationTileset2 + $30 ; star tile (top left quadrant)
 	ld hl, vChars1 + $200
 	lb bc, BANK(AnimationTileset2), $01
@@ -75,6 +77,7 @@ AnimateShootingStar:
 	ld hl, rOBP0
 	rrc [hl]
 	rrc [hl]
+	call UpdateGBCPal_OBP0
 	ld c, 10
 	call CheckForUserInterruption
 	ret c
@@ -118,6 +121,19 @@ AnimateShootingStar:
 	ld [hli], a ; X
 	inc de
 	inc hl
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;gbcnote - hl now points to OAM attribute byte for falling stars
+;Need to get and set the palette data from the new coordinate arrays
+	push bc
+	ld a, [de]
+	ld b,a
+	ld a, [hl]
+	and $f0
+	or b
+	ld [hl], a
+	inc de
+	pop bc
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 	inc hl
 	dec c
 	jr nz, .smallStarsInnerLoop
@@ -160,29 +176,39 @@ SmallStarsWaveCoordsPointerTable:
 ; The stars that fall from the Gamefreak logo come in 4 waves of 4 OAM entries.
 ; These arrays contain the Y and X coordinates of each OAM entry.

+;gbcnote - these have been modified per Yellow version to have pal data for the GBC attribute bits
+
 SmallStarsWave1Coords:
 	db $68,$30
-	db $68,$40
+	db $05,$68
+	db $40,$05
 	db $68,$58
-	db $68,$78
+	db $04,$68
+	db $78,$07

 SmallStarsWave2Coords:
 	db $68,$38
-	db $68,$48
+	db $05,$68
+	db $48,$06
 	db $68,$60
-	db $68,$70
+	db $04,$68
+	db $70,$07

 SmallStarsWave3Coords:
 	db $68,$34
-	db $68,$4C
+	db $05,$68
+	db $4c,$06
 	db $68,$54
-	db $68,$64
+	db $06,$68
+	db $64,$07

 SmallStarsWave4Coords:
-	db $68,$3C
-	db $68,$5C
-	db $68,$6C
-	db $68,$74
+	db $68,$3c
+	db $05,$68
+	db $5c,$04
+	db $68,$6c
+	db $07,$68
+	db $74,$07

 SmallStarsEmptyWave:
 	db $FF
@@ -204,7 +230,7 @@ MoveDownSmallStars:
 	ld a, [rOBP1]
 	xor %10100000
 	ld [rOBP1], a
-
+	call UpdateGBCPal_OBP1
 	ld c, 3
 	call CheckForUserInterruption
 	ret c
@@ -231,11 +257,12 @@ GameFreakLogoOAMData:
 	db $60,$78,$86,$00
 GameFreakLogoOAMDataEnd:

-GameFreakShootingStarOAMData:
-	db $00,$A0,$A0,$10
-	db $00,$A8,$A0,$30
-	db $08,$A0,$A1,$10
-	db $08,$A8,$A1,$30
+GameFreakShootingStarOAMData:	;gbcnote - changing the attribute to use palette 4 via GBC bits
+;last column is byte 3 of OAM data; the attribute byte
+	db $00,$A0,$A0,$14
+	db $00,$A8,$A0,$34
+	db $08,$A0,$A1,$14
+	db $08,$A8,$A1,$34
 GameFreakShootingStarOAMDataEnd:

 FallingStar:
diff --git a/engine/hall_of_fame.asm b/engine/hall_of_fame.asm
index 3c9b1723a..54e4715af 100755
--- a/engine/hall_of_fame.asm
+++ b/engine/hall_of_fame.asm
@@ -122,6 +122,7 @@ HoFShowMonOrPlayer:
 	call RunPaletteCommand
 	ld a, %11100100
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, $31 ; back pic
 	call HoFLoadMonPlayerPicTileIDs
 	ld d, $a0
diff --git a/engine/intro.asm b/engine/intro.asm
index 4acab5a6e..194ae1364 100755
--- a/engine/intro.asm
+++ b/engine/intro.asm
@@ -32,6 +32,10 @@ PlayIntroScene:
 	ld [rBGP], a
 	ld [rOBP0], a
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
+
 	xor a
 	ld [hSCX], a
 	ld b, GENGAR_INTRO_TILES1
@@ -314,6 +318,7 @@ PlayShootingStar:
 	callba LoadCopyrightAndTextBoxTiles
 	ldPal a, BLACK, DARK_GRAY, LIGHT_GRAY, WHITE
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 180
 	call DelayFrames
 	call ClearScreen
diff --git a/engine/menu/diploma.asm b/engine/menu/diploma.asm
index 09ba123e3..87ebf4714 100755
--- a/engine/menu/diploma.asm
+++ b/engine/menu/diploma.asm
@@ -61,6 +61,7 @@ DisplayDiploma:
 	call GBPalNormal
 	ld a, $90
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	call WaitForTextScrollButtonPress
 	ld hl, wd730
 	res 6, [hl]
diff --git a/engine/oak_speech.asm b/engine/oak_speech.asm
index 1071c6f83..032884c85 100755
--- a/engine/oak_speech.asm
+++ b/engine/oak_speech.asm
@@ -176,6 +176,7 @@ FadeInIntroPic:
 .next
 	ld a, [hli]
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 10
 	call DelayFrames
 	dec b
@@ -197,6 +198,7 @@ MovePicLeft:

 	ld a, %11100100
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 .next
 	call DelayFrame
 	ld a, [rWX]
diff --git a/engine/overworld/cut.asm b/engine/overworld/cut.asm
index f6ae64685..dfef65f65 100755
--- a/engine/overworld/cut.asm
+++ b/engine/overworld/cut.asm
@@ -76,6 +76,7 @@ InitCutAnimOAM:
 	ld [wWhichAnimationOffsets], a
 	ld a, %11100100
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	ld a, [wCutTile]
 	cp $52
 	jr z, .grass
diff --git a/engine/overworld/cut2.asm b/engine/overworld/cut2.asm
index f16fed66f..37490f950 100755
--- a/engine/overworld/cut2.asm
+++ b/engine/overworld/cut2.asm
@@ -18,6 +18,7 @@ AnimCut:
 	ld a, [rOBP1]
 	xor $64
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	call DelayFrame
 	pop bc
 	dec c
@@ -68,6 +69,7 @@ AnimCutGrass_UpdateOAMEntries:
 	ld a, [rOBP1]
 	xor $64
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	call DelayFrame
 	pop bc
 	dec c
diff --git a/engine/overworld/healing_machine.asm b/engine/overworld/healing_machine.asm
index 38a44cfb0..ca4763b67 100755
--- a/engine/overworld/healing_machine.asm
+++ b/engine/overworld/healing_machine.asm
@@ -12,6 +12,7 @@ AnimateHealingMachine:
 	push af
 	ld a, $e0
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	ld hl, wOAMBuffer + $84
 	ld de, PokeCenterOAMData
 	call CopyHealingMachineOAM
@@ -57,6 +58,7 @@ AnimateHealingMachine:
 	call DelayFrames
 	pop af
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	pop hl
 	pop af
 	ld [hl], a
@@ -81,6 +83,7 @@ FlashSprite8Times:
 	ld a, [rOBP1]
 	xor d
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	ld c, 10
 	call DelayFrames
 	dec b
diff --git a/engine/overworld/oam.asm b/engine/overworld/oam.asm
index 2c2a3dff8..2343c172b 100755
--- a/engine/overworld/oam.asm
+++ b/engine/overworld/oam.asm
@@ -129,10 +129,29 @@ PrepareOAMData:
 	ld a, [hSpritePriority]
 	or [hl]
 .skipPriority
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;gbcnote - handling GBC bits for object table attributes
+
+	;Let's do this bit check now instead of later.
+	;Then we'll push AF to preserve the flag register
+	bit 0, a ; OAMFLAG_ENDOFDATA
+	push af
+
+	res 3, a ;0=vram0 & 1=vram1
+	and %11111100	;if on GBC, default to OBJ pal 0 or 4
+	res 2, a; default of OBP0 uses palette 0
+	bit 4, a ; 0=OBP0 or 1=OBP1
+	jr z, .spriteusesOBP0
+	set 2, a ; palette 4 is OBP1
+.spriteusesOBP0
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 	inc hl
 	ld [de], a
 	inc e
-	bit 0, a ; OAMFLAG_ENDOFDATA
+	;bit 0, a ; OAMFLAG_ENDOFDATA
+	;We already did this earlier, and we are also done with A's current value.
+	;So all that's needed is to pop AF to get the flags back
+	pop af
 	jr z, .tileLoop

 	ld a, e
@@ -187,3 +206,4 @@ GetSpriteScreenXY:
 	and $f0
 	ld [de], a  ; c1xb (x)
 	ret
+
diff --git a/engine/overworld/ssanne.asm b/engine/overworld/ssanne.asm
index ea4747ce6..d8b32865e 100755
--- a/engine/overworld/ssanne.asm
+++ b/engine/overworld/ssanne.asm
@@ -7,6 +7,7 @@ AnimateBoulderDust:
 	ld [wUpdateSpritesEnabled], a
 	ld a, %11100100
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	call LoadSmokeTileFourTimes
 	callba WriteCutOrBoulderDustAnimationOAMBlock
 	ld c, 8 ; number of steps in animation
@@ -21,6 +22,7 @@ AnimateBoulderDust:
 	ld a, [rOBP1]
 	xor %01100100
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	call Delay3
 	pop bc
 	dec c
diff --git a/engine/palettes.asm b/engine/palettes.asm
index 6fe395689..97610e5f5 100755
--- a/engine/palettes.asm
+++ b/engine/palettes.asm
@@ -1,6 +1,6 @@
 _RunPaletteCommand:
 	call GetPredefRegisters
-	ld a, b
+	ld a, b	;b holds the address of the pal command to run
 	cp $ff
 	jr nz, .next
 	ld a, [wDefaultPaletteCommand] ; use default command if command ID is $ff
@@ -16,7 +16,7 @@ _RunPaletteCommand:
 	ld h, [hl]
 	ld l, a
 	ld de, SendSGBPackets
-	push de
+	push de	;by pushing de, the next 'ret' command encountered will jump to SendSGBPackets
 	jp hl

 SetPal_BattleBlack:
@@ -246,6 +246,16 @@ SetPal_TrainerCard:
 	ld hl, PalPacket_TrainerCard
 	ld de, wTrainerCardBlkPacket
 	ret
+;gbcnote - added more pal functions
+SendUnknownPalPacket_7205d::
+	ld hl, UnknownPalPacket_72811
+	ld de, BlkPacket_WholeScreen
+	ret
+
+SendUnknownPalPacket_72064::
+	ld hl, UnknownPalPacket_72821
+	ld de, UnknownPacket_72751
+	ret

 SetPalFunctions:
 	dw SetPal_BattleBlack
@@ -262,6 +272,9 @@ SetPalFunctions:
 	dw SetPal_PokemonWholeScreen
 	dw SetPal_GameFreakIntro
 	dw SetPal_TrainerCard
+	;gbctest - adding packets from yellow
+	dw SendUnknownPalPacket_7205d
+	dw SendUnknownPalPacket_72064

 ; The length of the blk data of each badge on the Trainer Card.
 ; The Rainbow Badge has 3 entries because of its many colors.
@@ -330,7 +343,17 @@ UpdatePartyMenuBlkPacket:
 	ld [hl], e
 	ret

-SendSGBPacket:
+SendSGBPacket: ;gbcnote - shifted joypad polling around
+; disable ReadJoypad to prevent it from interfering with sending the packet
+	ld a, 1
+	ld [hDisableJoypadPolling], a ; don't poll joypad while sending packet
+	call _SendSGBPacket
+;re-enable joypad polling
+	xor a
+	ld [hDisableJoypadPolling], a
+	ret
+
+_SendSGBPacket:
 ;check number of packets
 	ld a, [hl]
 	and $07
@@ -340,9 +363,6 @@ SendSGBPacket:
 .loop2
 ; save B for later use
 	push bc
-; disable ReadJoypad to prevent it from interfering with sending the packet
-	ld a, 1
-	ld [hDisableJoypadPolling], a
 ; send RESET signal (P14=LOW, P15=LOW)
 	xor a
 	ld [rJOYP], a
@@ -383,8 +403,6 @@ SendSGBPacket:
 ; set P14=HIGH,P15=HIGH
 	ld a, $30
 	ld [rJOYP], a
-	xor a
-	ld [hDisableJoypadPolling], a
 ; wait for about 70000 cycles
 	call Wait7000
 ; restore (previously pushed) number of packets
@@ -395,18 +413,22 @@ SendSGBPacket:
 ; else send 16 more bytes
 	jr .loop2

-LoadSGB:
+LoadSGB:	;gbcnote - adjust for GBC
 	xor a
 	ld [wOnSGB], a
 	call CheckSGB
-	ret nc
-	ld a, 1
-	ld [wOnSGB], a
-	ld a, [wGBC]
+	jr c, .onSGB
+	ld a, [hGBC]
 	and a
-	jr z, .notGBC
+	jr z, .onDMG
+	;if on gbc, set SGB flag but skip all the SGB vram stuff
+	ld a, $1
+	ld [wOnSGB], a
+.onDMG
 	ret
-.notGBC
+.onSGB
+	ld a, $1
+	ld [wOnSGB], a
 	di
 	call PrepareSuperNintendoVRAMTransfer
 	ei
@@ -521,6 +543,7 @@ CopyGfxToSuperNintendoVRAM:
 	call DisableLCD
 	ld a, $e4
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld de, vChars1
 	ld a, [wCopyingSGBTileData]
 	and a
@@ -551,6 +574,7 @@ CopyGfxToSuperNintendoVRAM:
 	call SendSGBPacket
 	xor a
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ei
 	ret

@@ -568,13 +592,18 @@ Wait7000:
 	ret

 SendSGBPackets:
-	ld a, [wGBC]
+	ld a, [hGBC]	;gbcnote - replaced wGBC
 	and a
 	jr z, .notGBC
 	push de
 	call InitGBCPalettes
 	pop hl
-;	call EmptyFunc5
+	;gbcnote - initialize the second pal packet in de (now in hl) then enable the lcd
+	call InitGBCPalettes
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK
+	ret z
+	call Delay3
 	ret
 .notGBC
 	push de
@@ -582,30 +611,345 @@ SendSGBPackets:
 	pop hl
 	jp SendSGBPacket

-InitGBCPalettes:
-	ld a, $80 ; index 0 with auto-increment
-	ld [rBGPI], a
+InitGBCPalettes:	;gbcnote - updating this to work with the Yellow code
+	ld a, [hl]
+	and $f8
+	cp $20	;check to see if hl points to a blk pal packet
+	jp z, TranslatePalPacketToBGMapAttributes	;jump if so
+	;otherwise hl points to a different pal packet or wPalPacket
 	inc hl
-	ld c, $20
+index = 0
+	REPT NUM_ACTIVE_PALS
+		IF index > 0
+			pop hl
+		ENDC
+
+		ld a, [hli]	;get palette ID into 'A'
+		inc hl
+
+		IF index < (NUM_ACTIVE_PALS + -1)
+			push hl
+		ENDC
+
+		call GetGBCBasePalAddress	;get palette address into de
+		ld a, e
+		ld [wGBCBasePalPointers + index * 2], a
+		ld a, d
+		ld [wGBCBasePalPointers + index * 2 + 1], a
+
+		ld a, CONVERT_BGP
+		call DMGPalToGBCPal
+		ld a, index
+		call TransferCurBGPData
+
+		ld a, CONVERT_OBP0
+		call DMGPalToGBCPal
+		ld a, index
+		call TransferCurOBPData
+
+		ld a, CONVERT_OBP1
+		call DMGPalToGBCPal
+		ld a, index + 4
+		call TransferCurOBPData
+index = index + 1
+	ENDR
+	ret
+
+GetGBCBasePalAddress:: ;gbcnote - new function
+; Input: a = palette ID
+; Output: de = palette address
+	push hl
+	ld l, a
+	xor a
+	ld h, a
+	add hl, hl
+	add hl, hl
+	add hl, hl
+	ld de, GBCBasePalettes
+	add hl, de
+	ld a, l
+	ld e, a
+	ld a, h
+	ld d, a
+	pop hl
+	ret
+
+DMGPalToGBCPal::	;gbcnote - new function
+; Populate wGBCPal with colors from a base palette, selected using one of the
+; DMG palette registers.
+; Input:
+; a = which DMG palette register
+; de = address of GBC base palette
+and a
+	jr nz, .notBGP
+	ld a, [rBGP]
+	ld [wLastBGP], a
+	jr .convert
+.notBGP
+	dec a
+	jr nz, .notOBP0
+	ld a, [rOBP0]
+	ld [wLastOBP0], a
+	jr .convert
+.notOBP0
+	ld a, [rOBP1]
+	ld [wLastOBP1], a
+.convert
+;"A" now holds the palette data
+color_index = 0
+	REPT NUM_COLORS
+		ld b, a	;"B" now holds the palette data
+		and %11	;"A" now has just the value for the shade of palette color 0
+		call .GetColorAddress
+		;now load the value that HL points to into wGBCPal offset by the loop
+		ld a, [hli]
+		ld [wGBCPal + color_index * 2], a
+		ld a, [hl]
+		ld [wGBCPal + color_index * 2 + 1], a
+
+		IF color_index < (NUM_COLORS + -1)
+			ld a, b	;restore the palette data back into "A"
+			;rotate the palette data bits twice to the right so the next color in line becomes color 0
+			rrca
+			rrca
+		ENDC
+color_index = color_index + 1
+	ENDR
+	ret
+.GetColorAddress:
+	add a	;double the value of the shade in "A"
+	ld l, a	;load 2x shade value into "L"
+	xor a	;zero "A"
+	ld h, a	;and load it to "H", so HL is now [00|2x shade]
+	add hl, de	;HL now holds the base palette address offset by 2x shade in bytes (base, base+2, base+4, or base+6)
+	ret
+
+TransferCurBGPData::
+; a = indexed offset of wGBCBasePalPointers
+	push de
+	;multiply index by 8 since each index represents 8 bytes worth of data
+	add a
+	add a
+	add a
+	or $80 ; set auto-increment bit of rBGPI
+	ld [rBGPI], a
+	ld de, rBGPD
+	ld hl, wGBCPal
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK
+	jr nz, .lcdEnabled
+	rept NUM_COLORS
+	call TransferPalColorLCDDisabled
+	endr
+	jr .done
+.lcdEnabled
+	rept NUM_COLORS
+	call TransferPalColorLCDEnabled
+	endr
+.done
+	pop de
+	ret
+
+BufferBGPPal::
+; Copy wGBCPal to palette a in wBGPPalsBuffer.
+; a = indexed offset of wGBCBasePalPointers
+	push de
+	;multiply index by 8 since each index represents 8 bytes worth of data
+	add a
+	add a
+	add a
+	ld l, a
+	xor a
+	ld h, a
+	ld de, wBGPPalsBuffer
+	add hl, de	;hl now points to wBGPPalsBuffer + 8*index
+	ld de, wGBCPal
+	ld c, PAL_SIZE
+.loop	;copy the 8 bytes of wGBCPal to its indexed spot in wBGPPalsBuffer
+	ld a, [de]
+	ld [hli], a
+	inc de
+	dec c
+	jr nz, .loop
+	pop de
+	ret
+
+TransferBGPPals::
+; Transfer the buffered BG palettes.
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK
+	jr z, .lcdDisabled
+	; have to wait until LCDC is disabled
+	; LCD should only ever be disabled during the V-blank period to prevent hardware damage
+	di	;disable interrupts
+.waitLoop
+	ld a, [rLY]
+	cp 144	;V-blank can be confirmed when the value of LY is greater than or equal to 144
+	jr c, .waitLoop
+.lcdDisabled
+	call .DoTransfer
+	ei	;enable interrupts
+	ret
+.DoTransfer:
+	xor a
+	or $80 ; set the auto-increment bit of rBPGI
+	ld [rBGPI], a
+	ld de, rBGPD
+	ld hl, wBGPPalsBuffer
+	ld c, 4 * PAL_SIZE
 .loop
 	ld a, [hli]
-	inc hl
+	ld [de], a
+	dec c
+	jr nz, .loop
+	ret
+
+TransferCurOBPData:
+; a = indexed offset of wGBCBasePalPointers
+	push de
+	;multiply index by 8 since each index represents 8 bytes worth of data
 	add a
 	add a
 	add a
-	ld de, SuperPalettes
-	add e
-	jr nc, .noCarry
-	inc d
-.noCarry
-	ld a, [de]
-	ld [rBGPD], a
+	or $80 ; set auto-increment bit of OBPI
+	ld [rOBPI], a
+	ld de, rOBPD
+	ld hl, wGBCPal
+	ld a, [rLCDC]
+	and rLCDC_ENABLE_MASK
+	jr nz, .lcdEnabled
+	rept NUM_COLORS
+	call TransferPalColorLCDDisabled
+	endr
+	jr .done
+.lcdEnabled
+	rept NUM_COLORS
+	call TransferPalColorLCDEnabled
+	endr
+.done
+	pop de
+	ret
+
+TransferPalColorLCDEnabled:
+; Transfer a palette color while the LCD is enabled.
+; In case we're already in H-blank or V-blank, wait for it to end. This is a
+; precaution so that the transfer doesn't extend past the blanking period.
+	ld a, [rSTAT]
+	and %10 ; mask for non-V-blank/non-H-blank STAT mode
+	jr z, TransferPalColorLCDEnabled	;repeat if still in h-blank or v-blank
+; Wait for H-blank or V-blank to begin.
+.notInBlankingPeriod
+	ld a, [rSTAT]
+	and %10 ; mask for non-V-blank/non-H-blank STAT mode
+	jr nz, .notInBlankingPeriod
+; fall through
+TransferPalColorLCDDisabled:
+; Transfer a palette color while the LCD is disabled.
+	ld a, [hli]
+	ld [de], a
+	ld a, [hli]
+	ld [de], a
+	ret
+
+_UpdateGBCPal_BGP::
+index = 0
+	REPT NUM_ACTIVE_PALS
+		ld a, [wGBCBasePalPointers + index * 2]
+		ld e, a
+		ld a, [wGBCBasePalPointers + index * 2 + 1]
+		ld d, a
+		xor a ; CONVERT_BGP
+		call DMGPalToGBCPal
+		ld a, index
+		call BufferBGPPal	; Copy wGBCPal to palette indexed in wBGPPalsBuffer.
+index = index + 1
+	ENDR
+	call TransferBGPPals	;Transfer wBGPPalsBuffer contents to rBGPD
+	ret
+
+_UpdateGBCPal_OBP::
+; d then c = CONVERT_OBP0 or CONVERT_OBP1
+	ld a, d
+	ld c, a
+index = 0
+	REPT NUM_ACTIVE_PALS
+		ld a, [wGBCBasePalPointers + index * 2]
+		ld e, a
+		ld a, [wGBCBasePalPointers + index * 2 + 1]
+		ld d, a
+		ld a, c
+		call DMGPalToGBCPal
+		ld a, c
+		dec a
+		rlca
+		rlca
+
+		IF index > 0
+			IF index == 1
+				inc a
+			ELSE
+				add index
+			ENDC
+		ENDC
+		;OBP0: a = 0, 1, 2, or 3
+		;OBP1: a = 4, 5, 6, or 7
+		call TransferCurOBPData
+index = index + 1
+	ENDR
+	ret
+
+;gbcnote - new function
+TranslatePalPacketToBGMapAttributes::
+; translate the SGB pals for blk packets into something usable for the GBC
+	push hl
+	pop de
+	ld hl, PalPacketPointers
+	ld a, [hli]
+	ld c, a
+.loop
+	ld a, e
+.innerLoop
+	cp [hl]
+	jr z, .checkHighByte
+	inc hl
+	inc hl
+	dec c
+	jr nz, .innerLoop
+	ret
+.checkHighByte
+; the low byte of pointer matched, so check the high byte
+	inc hl
+	ld a, d
+	cp [hl]
+	jr z, .foundMatchingPointer
+	inc hl
 	dec c
 	jr nz, .loop
 	ret
+.foundMatchingPointer
+	push de
+	ld d, c
+	callba LoadBGMapAttributes
+	pop de
+	ret

-;EmptyFunc5:
-;	ret
+;gbcnote - pointers from pokemon yellow
+PalPacketPointers::
+	db (palPacketPointersEnd - palPacketPointers) / 2
+palPacketPointers
+	dw BlkPacket_WholeScreen
+	dw BlkPacket_Battle
+	dw BlkPacket_StatusScreen
+	dw BlkPacket_Pokedex
+	dw BlkPacket_Slots
+	dw BlkPacket_Titlescreen
+	dw BlkPacket_NidorinoIntro
+	dw wPartyMenuBlkPacket
+	dw wTrainerCardBlkPacket
+	dw BlkPacket_GameFreakIntro
+	dw wPalPacket
+	dw UnknownPacket_72751
+palPacketPointersEnd

 CopySGBBorderTiles:
 ; SGB tile data is stored in a 4BPP planar format.
@@ -644,5 +988,6 @@ INCLUDE "data/sgb_packets.asm"
 INCLUDE "data/mon_palettes.asm"

 INCLUDE "data/super_palettes.asm"
+INCLUDE "data/gbc_palettes.asm"

 INCLUDE "data/sgb_border.asm"
diff --git a/engine/predefs12.asm b/engine/predefs12.asm
index 95f0ea256..f1ec397be 100755
--- a/engine/predefs12.asm
+++ b/engine/predefs12.asm
@@ -4,11 +4,13 @@ ChangeBGPalColor0_4Frames:
 	ld a, [rBGP]
 	or b
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 4
 	call DelayFrames
 	ld a, [rBGP]
 	and %11111100
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ret

 PredefShakeScreenVertically:
diff --git a/engine/slot_machine.asm b/engine/slot_machine.asm
index 887626473..5c85bd0bb 100755
--- a/engine/slot_machine.asm
+++ b/engine/slot_machine.asm
@@ -26,6 +26,7 @@ PromptUserToPlaySlots:
 	call GBPalNormal
 	ld a, $e4
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	ld hl, wd730
 	set 6, [hl]
 	xor a
@@ -481,6 +482,7 @@ SlotMachine_CheckForMatches:
 	ld a, [rBGP]
 	xor $40
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld c, 5
 	call DelayFrames
 	dec b
@@ -497,6 +499,7 @@ SlotMachine_CheckForMatches:
 	call SlotMachine_PrintPayoutCoins
 	ld a, $e4
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	jp .done

 SymbolLinedUpSlotMachineText:
@@ -722,6 +725,7 @@ SlotMachine_PayCoinsToPlayer:
 	ld a, [rOBP0]
 	xor $40 ; make the slot wheel symbols flash
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	ld a, 5
 .skip1
 	ld [wAnimCounter], a
diff --git a/engine/titlescreen.asm b/engine/titlescreen.asm
index 03a5832d8..00b8d2ac1 100755
--- a/engine/titlescreen.asm
+++ b/engine/titlescreen.asm
@@ -139,6 +139,7 @@ ENDC
 	call GBPalNormal
 	ld a, %11100100
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0

 ; make pokemon logo bounce up and down
 	ld bc, hSCY ; background scroll Y
@@ -217,6 +218,16 @@ ENDC
 	xor a
 	ld [wUnusedCC5B], a

+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;gbcnote - The tiles in the window need to be shifted so that the bottom
+;half of the title screen is in the top half of the window area.
+;This is accomplished by copying the tile map to vram at an offset.
+;The goal is to get the tile map for the bottom half of the title screen
+;resides in the BGMap1 address space (address $9c00).
+	ld a, (vBGMap0 + $300) / $100
+	call TitleScreenCopyTileMapToVRAM
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
 ; Keep scrolling in new mons indefinitely until the user performs input.
 .awaitUserInterruptionLoop
 	ld c, 200
@@ -288,7 +299,15 @@ TitleScreenPickNewMon:
 TitleScreenScrollInMon:
 	ld d, 0 ; scroll in
 	callba TitleScroll
-	xor a
+	;xor a
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;gbcnote - The window normally covers the whole screen when picking a new title screen mon.
+;This is not desired since it applies BG pal 2 to the whole screen when on a gbc.
+;Instead, shift the window downwards by 40 tiles to just cover the version text and below.
+;This makes it so the map attributes for BGMap1 (address $9c00) are covering the bottom half
+;of the screen.
+	ld a, $40
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 	ld [hWY], a
 	ret

@@ -331,6 +350,16 @@ DrawPlayerCharacter:
 	ld e, a
 	ld a, [wPlayerCharacterOAMTile]
 	ld [hli], a ; tile
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;gbcnote - set the palette for the player tiles
+;These bits only work on the GBC
+	push af
+	ld a, [hl]	;Attributes/Flags
+	and %11111000
+	or  %00000010
+	ld [hl], a
+	pop af
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 	inc a
 	ld [wPlayerCharacterOAMTile], a
 	inc hl
diff --git a/engine/trade.asm b/engine/trade.asm
index 8bc8e3bca..ad0f1944f 100755
--- a/engine/trade.asm
+++ b/engine/trade.asm
@@ -182,6 +182,7 @@ LoadTradingGFXAndMonNames:
 	ld a, $f0 ; SGB OBP0
 .next
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	call EnableLCD
 	xor a
 	ld [H_AUTOBGTRANSFERENABLED], a
@@ -199,6 +200,7 @@ LoadTradingGFXAndMonNames:
 Trade_LoadMonPartySpriteGfx:
 	ld a, %11010000
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	jpba LoadMonPartySpriteGfx

 Trade_SwapNames:
@@ -303,6 +305,7 @@ Trade_AnimateBallEnteringLinkCable:
 	call DelayFrames
 	ld a, %11100100
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	xor a
 	ld [wLinkCableAnimBulgeToggle], a
 	lb bc, $20, $60
@@ -382,6 +385,7 @@ Trade_AnimLeftToRight:
 	ld [wTradedMonMovingRight], a
 	ld a, %11100100
 	ld [rOBP0], a
+	call UpdateGBCPal_OBP0
 	ld a, $54
 	ld [wBaseCoordX], a
 	ld a, $1c
@@ -599,6 +603,7 @@ Trade_AnimCircledMon:
 	ld a, [rBGP]
 	xor $3c ; make link cable flash
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
 	ld hl, wOAMBuffer + $02
 	ld de, $4
 	ld c, $14
diff --git a/home.asm b/home.asm
index e35846817..f1fd85655 100755
--- a/home.asm
+++ b/home.asm
@@ -107,9 +107,9 @@ Start::
 	xor a
 	jr .ok
 .gbc
-	ld a, 0
+	ld a, 1	;gbctest - set the marker for being in gbc mode
 .ok
-	ld [wGBC], a
+	ld [hGBC], a
 	jp Init


@@ -2153,6 +2153,75 @@ DisplayTextBoxID::
 	ld [MBC1RomBank], a
 	ret

+;gbcnote - new functions
+UpdateGBCPal_BGP::
+	push af
+	ld a, [hGBC]
+	and a
+	jr z, .notGBC
+	push bc
+	push de
+	push hl
+	ld a, [rBGP]
+	ld b, a
+	ld a, [wLastBGP]
+	cp b
+	jr z, .noChangeInBGP
+	callba _UpdateGBCPal_BGP
+.noChangeInBGP
+	pop hl
+	pop de
+	pop bc
+.notGBC
+	pop af
+	ret
+
+UpdateGBCPal_OBP0::
+	push af
+	ld a, [hGBC]
+	and a
+	jr z, .notGBC
+	push bc
+	push de
+	push hl
+	ld a, [rOBP0]
+	ld b, a
+	ld a, [wLastOBP0]
+	cp b
+	jr z, .noChangeInOBP0
+	ld d, CONVERT_OBP0
+	callba _UpdateGBCPal_OBP
+.noChangeInOBP0
+	pop hl
+	pop de
+	pop bc
+.notGBC
+	pop af
+	ret
+
+UpdateGBCPal_OBP1::
+	push af
+	ld a, [hGBC]
+	and a
+	jr z, .notGBC
+	push bc
+	push de
+	push hl
+	ld a, [rOBP1]
+	ld b, a
+	ld a, [wLastOBP1]
+	cp b
+	jr z, .noChangeInOBP1
+	ld d, CONVERT_OBP1
+	callba _UpdateGBCPal_OBP
+.noChangeInOBP1
+	pop hl
+	pop de
+	pop bc
+.notGBC
+	pop af
+	ret
+
 ; not zero if an NPC movement script is running, the player character is
 ; automatically stepping down from a door, or joypad states are being simulated
 IsPlayerCharacterBeingControlledByGame::
@@ -4511,6 +4580,9 @@ GBPalNormal::
 	ld [rBGP], a
 	ld a, %11010000 ; 3100
 	ld [rOBP0], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret

 GBPalWhiteOut::
@@ -4519,6 +4591,9 @@ GBPalWhiteOut::
 	ld [rBGP], a
 	ld [rOBP0], a
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret


diff --git a/home/fade.asm b/home/fade.asm
index 9482fcb0f..59fd5b113 100755
--- a/home/fade.asm
+++ b/home/fade.asm
@@ -16,6 +16,9 @@ LoadGBPal::
 	ld [rOBP0], a
 	ld a, [hli]
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ret

 GBFadeInFromBlack::
@@ -34,6 +37,9 @@ GBFadeIncCommon:
 	ld [rOBP0], a
 	ld a, [hli]
 	ld [rOBP1], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ld c, 8
 	call DelayFrames
 	dec b
@@ -56,6 +62,9 @@ GBFadeDecCommon:
 	ld [rOBP0], a
 	ld a, [hld]
 	ld [rBGP], a
+	call UpdateGBCPal_BGP
+	call UpdateGBCPal_OBP0
+	call UpdateGBCPal_OBP1
 	ld c, 8
 	call DelayFrames
 	dec b
diff --git a/home/init.asm b/home/init.asm
index cb5c65839..d11fd4e2f 100755
--- a/home/init.asm
+++ b/home/init.asm
@@ -54,7 +54,7 @@ rLCDC_DEFAULT EQU %11100011
 	call ClearVram

 	ld hl, $ff80
-	ld bc, $ffff - $ff80
+	ld bc, $fffe - $ff80	;gbcnote - don't clear hGBC
 	call FillMemory

 	call ClearSprites
diff --git a/hram.asm b/hram.asm
index 4beca9c41..ae734b736 100755
--- a/hram.asm
+++ b/hram.asm
@@ -322,3 +322,4 @@ hDisableJoypadPolling EQU $FFF9

 hJoyInput EQU $FFF8

+hGBC EQU $FFFE ;gbcnote - 0 if DMG, != 0 if GBC
diff --git a/main.asm b/main.asm
index cab11b80a..9b3cc73cb 100755
--- a/main.asm
+++ b/main.asm
@@ -1925,7 +1925,7 @@ Underground_Block: INCBIN "gfx/blocksets/underground.bst"

 SECTION "bank1C",ROMX,BANK[$1C]

-INCLUDE "engine/gamefreak.asm"
+;INCLUDE "engine/gamefreak.asm"	;gbcnote - moved to another bank to make space
 INCLUDE "engine/hall_of_fame.asm"
 INCLUDE "engine/overworld/healing_machine.asm"
 INCLUDE "engine/overworld/player_animations.asm"
@@ -2119,3 +2119,11 @@ INCLUDE "engine/battle/read_trainer_party.asm"
 INCLUDE "data/trainer_moves.asm"
 INCLUDE "data/trainer_parties.asm"

+SECTION "bank2E",ROMX,BANK[$2E]
+;gbcnote - This bank with hold the bg map attributes for the gameboy color among other stuff
+
+;include the bgmap files from pokemon yellow
+INCLUDE "data/bg_map_attributes.asm"
+INCLUDE "engine/bg_map_attributes.asm"
+
+INCLUDE "engine/gamefreak.asm"	;gbcnote - moved here to make space
diff --git a/scripts/vermiliondock.asm b/scripts/vermiliondock.asm
index d400352ce..aa46bd069 100755
--- a/scripts/vermiliondock.asm
+++ b/scripts/vermiliondock.asm
@@ -63,6 +63,7 @@ VermilionDock_1db9b:
 	ld [H_AUTOBGTRANSFERENABLED], a
 	ld [wSSAnneSmokeDriftAmount], a
 	ld [rOBP1], a
+	call UpdateGBCPal_OBP1
 	ld a, 88
 	ld [wSSAnneSmokeX], a
 	ld hl, wMapViewVRAMPointer
diff --git a/wram.asm b/wram.asm
index 22a5c4781..e7489552e 100755
--- a/wram.asm
+++ b/wram.asm
@@ -597,6 +597,8 @@ wDexRatingNumMonsOwned:: ; cc5c
 	ds 1

 wDexRatingText:: ; cc5d
+wTrainerCardBadgeAttributes:: ; cc5d
+;gbcnote - modified to match yellow
 	ds 1

 wSlotMachineSavedROMBank:: ; cc5e
@@ -1422,7 +1424,8 @@ wScriptedNPCWalkCounter:: ; cf18

 	ds 1

-wGBC:: ; cf1a
+;gbcnote - moved to hram
+;wGBC:: ; cf1a
 	ds 1

 wOnSGB:: ; cf1b
@@ -1461,7 +1464,10 @@ wPalPacket:: ; cf2d

 wPartyMenuBlkPacket:: ; cf2e
 ; $30 bytes
-	ds 29
+	ds 9
+;gbcnote - modified to match yellow
+wPartyHPBarAttributes:: ; cf36
+	ds 20

 wExpAmountGained:: ; cf4b
 ; 2-byte big-endian number
@@ -2966,7 +2972,20 @@ wRoute18GateCurScript:: ; d669
 	ds 78
 wGameProgressFlagsEnd::

-	ds 56
+wGBCBasePalPointers::
+	ds NUM_ACTIVE_PALS * 2 ; 8 bytes
+wGBCPal::
+	ds PAL_SIZE ; 8 bytes
+wLastBGP::
+	ds 1
+wLastOBP0::
+	ds 1
+wLastOBP1::
+	ds 1
+wBGPPalsBuffer::
+	ds NUM_ACTIVE_PALS * PAL_SIZE ;32 bytes
+
+	ds 5

 wObtainedHiddenItemsFlags::
 	ds 14
